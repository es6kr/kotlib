buildscript {
	try {
		ext.kotlin_ver = project.KOTLIN_VERSION
	} catch (Exception ignored) {
		ext.kotlin_ver = '+'
	}

	repositories {
		jcenter()
	}
	dependencies {
		classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_ver"
		classpath 'com.jfrog.bintray.gradle:gradle-bintray-plugin:1.8.4'
	}
}

apply plugin: 'kotlin'
apply plugin: 'maven'
apply plugin: 'com.jfrog.bintray'

archivesBaseName = 'kotlib'
group 'kr.or.lightsalt'
try {
	version project.KOTLIB_VERSION
} catch (Exception ignored) {
}

// Run this task to bundle all needed dependency
task bundle(type: Jar) {
	baseName = archivesBaseName + '-all'
	from { configurations.compile.collect { it.isDirectory() ? it : zipTree(it) } }
	with jar
}

jar.finalizedBy(bundle)

repositories {
	jcenter()
}

dependencies {
	compile "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_ver"
	testCompile "org.jetbrains.kotlin:kotlin-test-junit:$kotlin_ver"

	compile "joda-time:joda-time:2.10.3"
	testCompile "junit:junit:4.12"
}

task sourcesJar(type: Jar, dependsOn: classes) {
	archiveClassifier.set('sources')
	from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
	archiveClassifier.set('javadoc')
	javadoc.failOnError(false)
	javadoc.source = sourceSets.main.allJava
	from javadoc.destinationDir
}

artifacts {
	archives sourcesJar
	archives javadocJar
}

Properties properties = new Properties()
try {
	properties.load(project.rootProject.file('local.properties').newDataInputStream())
} catch (Exception ignore) {
}

bintray {
	user = properties.getProperty('user')
	key = properties.getProperty('apiKey')
	configurations = ['archives']
	override = true
	pkg {
		repo = 'kotlin'
		name = archivesBaseName
		userOrg = properties.getProperty('org')
		licenses = ['Apache-2.0']
		vcsUrl = 'https://github.com/light-and-salt/kotlib.git'
		publish = true
	}
}
